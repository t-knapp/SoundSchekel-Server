<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Sequence;
use Doctrine\ORM\EntityManager;
use Doctrine\ORM\NoResultException;

/**
 * SequenceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SequenceRepository extends \Doctrine\ORM\EntityRepository
{
    const SEQUENCE_ID_GENERAL = 1;

    public function getNextValue()
    {
        return $this->getNext(SequenceRepository::SEQUENCE_ID_GENERAL);
    }

    /**
     * @param $sequenceId int
     * @return int
     */
    private function getNext($sequenceId)
    {
        $entityManager = $this->getEntityManager();
        try {
            $currentSequence = $this->querySequence($entityManager, $sequenceId);
        } catch (NoResultException $noResultException) {
            $currentSequence = $this->createNewSequence(SequenceRepository::SEQUENCE_ID_GENERAL);
            $entityManager->persist($currentSequence);
        }
        $sequenceValue = $currentSequence->getValue();
        $currentSequence->setValue($currentSequence->getValue() + 1);
        $entityManager->flush();
        return $sequenceValue;
    }

    /**
     * @param $entityManager EntityManager
     * @param $sequenceId int
     * @return mixed Sequence
     */
    private function querySequence($entityManager, $sequenceId) {
        return $entityManager->createQuery('SELECT s FROM AppBundle:Sequence s WHERE s.id = :sequenceId')
            ->setParameter('sequenceId', $sequenceId)
            ->getSingleResult();
    }

    /**
     * @param $sequenceId int
     * @return Sequence
     */
    private function createNewSequence($sequenceId) {
        $sequence = new Sequence($sequenceId);
        $sequence->setValue(0);
        return $sequence;
    }
}
